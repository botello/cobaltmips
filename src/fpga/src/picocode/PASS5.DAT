    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  Alberto del Rio/Oscar Monroy
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  Diseno de microprocesadores
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Provee el control para leer los registros del microprocesador.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; via UART a la PC corriendo HyperTerminal o similar
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Port definitions
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_LEDS, 80
  LOGFORMAT-CONSTANT PORT_LEDS, 80
INSTRUCTION-CONSTANT
   OPERAND1-PORT_LEDS
  OP1 VALUE-PORT_LEDS
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-; 8 simple LEDs
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED0, 01
  LOGFORMAT-CONSTANT LED0, 01
INSTRUCTION-CONSTANT
   OPERAND1-LED0
  OP1 VALUE-LED0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;     LED 0 - bit0
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED1, 02
  LOGFORMAT-CONSTANT LED1, 02
INSTRUCTION-CONSTANT
   OPERAND1-LED1
  OP1 VALUE-LED1
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;         1 - bit1
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED2, 04
  LOGFORMAT-CONSTANT LED2, 04
INSTRUCTION-CONSTANT
   OPERAND1-LED2
  OP1 VALUE-LED2
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;         2 - bit2
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED3, 08
  LOGFORMAT-CONSTANT LED3, 08
INSTRUCTION-CONSTANT
   OPERAND1-LED3
  OP1 VALUE-LED3
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;         3 - bit3
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED4, 10
  LOGFORMAT-CONSTANT LED4, 10
INSTRUCTION-CONSTANT
   OPERAND1-LED4
  OP1 VALUE-LED4
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;         4 - bit4
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED5, 20
  LOGFORMAT-CONSTANT LED5, 20
INSTRUCTION-CONSTANT
   OPERAND1-LED5
  OP1 VALUE-LED5
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-;         5 - bit5
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED6, 40
  LOGFORMAT-CONSTANT LED6, 40
INSTRUCTION-CONSTANT
   OPERAND1-LED6
  OP1 VALUE-LED6
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-;         6 - bit6
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED7, 80
  LOGFORMAT-CONSTANT LED7, 80
INSTRUCTION-CONSTANT
   OPERAND1-LED7
  OP1 VALUE-LED7
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;         7 - bit7
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_SIMPLE_IO, 7F
  LOGFORMAT-CONSTANT PORT_SIMPLE_IO, 7F
INSTRUCTION-CONSTANT
   OPERAND1-PORT_SIMPLE_IO
  OP1 VALUE-PORT_SIMPLE_IO
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; 4 simple outputs
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT simple_IO9, 01
  LOGFORMAT-CONSTANT simple_IO9, 01
INSTRUCTION-CONSTANT
   OPERAND1-simple_IO9
  OP1 VALUE-simple_IO9
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;  Header  IO9  - bit0
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT simple_IO10, 02
  LOGFORMAT-CONSTANT simple_IO10, 02
INSTRUCTION-CONSTANT
   OPERAND1-simple_IO10
  OP1 VALUE-simple_IO10
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;          IO10 - bit1
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT simple_IO11, 04
  LOGFORMAT-CONSTANT simple_IO11, 04
INSTRUCTION-CONSTANT
   OPERAND1-simple_IO11
  OP1 VALUE-simple_IO11
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;          IO11 - bit2
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT simple_IO12, 08
  LOGFORMAT-CONSTANT simple_IO12, 08
INSTRUCTION-CONSTANT
   OPERAND1-simple_IO12
  OP1 VALUE-simple_IO12
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;          IO12 - bit3
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_CMD, 30
  LOGFORMAT-CONSTANT PORT_CPU_CMD, 30
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_CMD
  OP1 VALUE-PORT_CPU_CMD
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT FLAG_CPU_HALT, 00
  LOGFORMAT-CONSTANT FLAG_CPU_HALT, 00
INSTRUCTION-CONSTANT
   OPERAND1-FLAG_CPU_HALT
  OP1 VALUE-FLAG_CPU_HALT
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT FLAG_CPU_GO, 01
  LOGFORMAT-CONSTANT FLAG_CPU_GO, 01
INSTRUCTION-CONSTANT
   OPERAND1-FLAG_CPU_GO
  OP1 VALUE-FLAG_CPU_GO
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_REGADDR, 00
  LOGFORMAT-CONSTANT PORT_CPU_REGADDR, 00
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_REGADDR
  OP1 VALUE-PORT_CPU_REGADDR
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_REGDATA0, 01
  LOGFORMAT-CONSTANT PORT_CPU_REGDATA0, 01
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_REGDATA0
  OP1 VALUE-PORT_CPU_REGDATA0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_REGDATA1, 02
  LOGFORMAT-CONSTANT PORT_CPU_REGDATA1, 02
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_REGDATA1
  OP1 VALUE-PORT_CPU_REGDATA1
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_REGDATA2, 03
  LOGFORMAT-CONSTANT PORT_CPU_REGDATA2, 03
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_REGDATA2
  OP1 VALUE-PORT_CPU_REGDATA2
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_REGDATA3, 04
  LOGFORMAT-CONSTANT PORT_CPU_REGDATA3, 04
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_REGDATA3
  OP1 VALUE-PORT_CPU_REGDATA3
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_MEMADDR, 10
  LOGFORMAT-CONSTANT PORT_CPU_MEMADDR, 10
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_MEMADDR
  OP1 VALUE-PORT_CPU_MEMADDR
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_MEMDATA0, 11
  LOGFORMAT-CONSTANT PORT_CPU_MEMDATA0, 11
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_MEMDATA0
  OP1 VALUE-PORT_CPU_MEMDATA0
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_MEMDATA1, 12
  LOGFORMAT-CONSTANT PORT_CPU_MEMDATA1, 12
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_MEMDATA1
  OP1 VALUE-PORT_CPU_MEMDATA1
   OPERAND2-12
  OP2 VALUE-12
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_MEMDATA2, 13
  LOGFORMAT-CONSTANT PORT_CPU_MEMDATA2, 13
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_MEMDATA2
  OP1 VALUE-PORT_CPU_MEMDATA2
   OPERAND2-13
  OP2 VALUE-13
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_CPU_MEMDATA3, 14
  LOGFORMAT-CONSTANT PORT_CPU_MEMDATA3, 14
INSTRUCTION-CONSTANT
   OPERAND1-PORT_CPU_MEMDATA3
  OP1 VALUE-PORT_CPU_MEMDATA3
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_STATUS, 20
  LOGFORMAT-CONSTANT PORT_STATUS, 20
INSTRUCTION-CONSTANT
   OPERAND1-PORT_STATUS
  OP1 VALUE-PORT_STATUS
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_UART_TX, 21
  LOGFORMAT-CONSTANT PORT_UART_TX, 21
INSTRUCTION-CONSTANT
   OPERAND1-PORT_UART_TX
  OP1 VALUE-PORT_UART_TX
   OPERAND2-21
  OP2 VALUE-21
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_UART_RX, 22
  LOGFORMAT-CONSTANT PORT_UART_RX, 22
INSTRUCTION-CONSTANT
   OPERAND1-PORT_UART_RX
  OP1 VALUE-PORT_UART_RX
   OPERAND2-22
  OP2 VALUE-22
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT tx_half_full, 01
  LOGFORMAT-CONSTANT tx_half_full, 01
INSTRUCTION-CONSTANT
   OPERAND1-tx_half_full
  OP1 VALUE-tx_half_full
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;  Transmitter     half full - bit0
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT tx_full, 02
  LOGFORMAT-CONSTANT tx_full, 02
INSTRUCTION-CONSTANT
   OPERAND1-tx_full
  OP1 VALUE-tx_full
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;    FIFO               full - bit1
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rx_data_present, 04
  LOGFORMAT-CONSTANT rx_data_present, 04
INSTRUCTION-CONSTANT
   OPERAND1-rx_data_present
  OP1 VALUE-rx_data_present
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;  Receiver     data present - bit2
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rx_half_full, 08
  LOGFORMAT-CONSTANT rx_half_full, 08
INSTRUCTION-CONSTANT
   OPERAND1-rx_half_full
  OP1 VALUE-rx_half_full
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;    FIFO          half full - bit3
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rx_full, 10
  LOGFORMAT-CONSTANT rx_full, 10
INSTRUCTION-CONSTANT
   OPERAND1-rx_full
  OP1 VALUE-rx_full
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;                   full - bit4
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT cpu_halt, 20
  LOGFORMAT-CONSTANT cpu_halt, 20
INSTRUCTION-CONSTANT
   OPERAND1-cpu_halt
  OP1 VALUE-cpu_halt
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-;                  spare '0' - bit5
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT spare2, 40
  LOGFORMAT-CONSTANT spare2, 40
INSTRUCTION-CONSTANT
   OPERAND1-spare2
  OP1 VALUE-spare2
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-;                  spare '0' - bit6
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT spare3, 80
  LOGFORMAT-CONSTANT spare3, 80
INSTRUCTION-CONSTANT
   OPERAND1-spare3
  OP1 VALUE-spare3
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;                  spare '0' - bit7
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Special Register usage
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG sF, UART_data
  LOGFORMAT-NAMEREG sF, UART_data
INSTRUCTION-NAMEREG
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-UART_data
  OP2 VALUE-UART_data
    COMMENT-;used to pass data to and from the UART
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Scratch Pad Memory Locations
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_duty_counter, 00
  LOGFORMAT-CONSTANT PWM_duty_counter, 00
INSTRUCTION-CONSTANT
   OPERAND1-PWM_duty_counter
  OP1 VALUE-PWM_duty_counter
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;Duty Counter 0 to 255 within 1KHz period (1ms)
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel0, 01
  LOGFORMAT-CONSTANT PWM_channel0, 01
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel0
  OP1 VALUE-PWM_channel0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;PWM settings for each channel
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel1, 02
  LOGFORMAT-CONSTANT PWM_channel1, 02
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel1
  OP1 VALUE-PWM_channel1
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; Channels 0 to 7 = LEDs 0 to 7
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel2, 03
  LOGFORMAT-CONSTANT PWM_channel2, 03
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel2
  OP1 VALUE-PWM_channel2
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-; Channels 8 to 11 = IO9 to IO12
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel3, 04
  LOGFORMAT-CONSTANT PWM_channel3, 04
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel3
  OP1 VALUE-PWM_channel3
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel4, 05
  LOGFORMAT-CONSTANT PWM_channel4, 05
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel4
  OP1 VALUE-PWM_channel4
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel5, 06
  LOGFORMAT-CONSTANT PWM_channel5, 06
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel5
  OP1 VALUE-PWM_channel5
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel6, 07
  LOGFORMAT-CONSTANT PWM_channel6, 07
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel6
  OP1 VALUE-PWM_channel6
   OPERAND2-07
  OP2 VALUE-07
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel7, 08
  LOGFORMAT-CONSTANT PWM_channel7, 08
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel7
  OP1 VALUE-PWM_channel7
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel8, 09
  LOGFORMAT-CONSTANT PWM_channel8, 09
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel8
  OP1 VALUE-PWM_channel8
   OPERAND2-09
  OP2 VALUE-09
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel9, 0A
  LOGFORMAT-CONSTANT PWM_channel9, 0A
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel9
  OP1 VALUE-PWM_channel9
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel10, 0B
  LOGFORMAT-CONSTANT PWM_channel10, 0B
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel10
  OP1 VALUE-PWM_channel10
   OPERAND2-0B
  OP2 VALUE-0B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PWM_channel11, 0C
  LOGFORMAT-CONSTANT PWM_channel11, 0C
INSTRUCTION-CONSTANT
   OPERAND1-PWM_channel11
  OP1 VALUE-PWM_channel11
   OPERAND2-0C
  OP2 VALUE-0C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s0, 0D
  LOGFORMAT-CONSTANT ISR_preserve_s0, 0D
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
  OP1 VALUE-ISR_preserve_s0
   OPERAND2-0D
  OP2 VALUE-0D
    COMMENT-;preserve register contents during Interrupt Service Routine
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s1, 0E
  LOGFORMAT-CONSTANT ISR_preserve_s1, 0E
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s1
  OP1 VALUE-ISR_preserve_s1
   OPERAND2-0E
  OP2 VALUE-0E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s2, 0F
  LOGFORMAT-CONSTANT ISR_preserve_s2, 0F
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s2
  OP1 VALUE-ISR_preserve_s2
   OPERAND2-0F
  OP2 VALUE-0F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;UART character strings will be stored in scratch pad memory ending in carriage return.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A string can be up to 16 characters with the start location defined by this constant.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT string_start, 30
  LOGFORMAT-CONSTANT string_start, 30
INSTRUCTION-CONSTANT
   OPERAND1-string_start
  OP1 VALUE-string_start
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Useful data constants
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;ASCII table
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_a, 61
  LOGFORMAT-CONSTANT character_a, 61
INSTRUCTION-CONSTANT
   OPERAND1-character_a
  OP1 VALUE-character_a
   OPERAND2-61
  OP2 VALUE-61
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_b, 62
  LOGFORMAT-CONSTANT character_b, 62
INSTRUCTION-CONSTANT
   OPERAND1-character_b
  OP1 VALUE-character_b
   OPERAND2-62
  OP2 VALUE-62
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_c, 63
  LOGFORMAT-CONSTANT character_c, 63
INSTRUCTION-CONSTANT
   OPERAND1-character_c
  OP1 VALUE-character_c
   OPERAND2-63
  OP2 VALUE-63
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_d, 64
  LOGFORMAT-CONSTANT character_d, 64
INSTRUCTION-CONSTANT
   OPERAND1-character_d
  OP1 VALUE-character_d
   OPERAND2-64
  OP2 VALUE-64
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_e, 65
  LOGFORMAT-CONSTANT character_e, 65
INSTRUCTION-CONSTANT
   OPERAND1-character_e
  OP1 VALUE-character_e
   OPERAND2-65
  OP2 VALUE-65
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_f, 66
  LOGFORMAT-CONSTANT character_f, 66
INSTRUCTION-CONSTANT
   OPERAND1-character_f
  OP1 VALUE-character_f
   OPERAND2-66
  OP2 VALUE-66
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_g, 67
  LOGFORMAT-CONSTANT character_g, 67
INSTRUCTION-CONSTANT
   OPERAND1-character_g
  OP1 VALUE-character_g
   OPERAND2-67
  OP2 VALUE-67
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_h, 68
  LOGFORMAT-CONSTANT character_h, 68
INSTRUCTION-CONSTANT
   OPERAND1-character_h
  OP1 VALUE-character_h
   OPERAND2-68
  OP2 VALUE-68
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_i, 69
  LOGFORMAT-CONSTANT character_i, 69
INSTRUCTION-CONSTANT
   OPERAND1-character_i
  OP1 VALUE-character_i
   OPERAND2-69
  OP2 VALUE-69
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_j, 6A
  LOGFORMAT-CONSTANT character_j, 6A
INSTRUCTION-CONSTANT
   OPERAND1-character_j
  OP1 VALUE-character_j
   OPERAND2-6A
  OP2 VALUE-6A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_k, 6B
  LOGFORMAT-CONSTANT character_k, 6B
INSTRUCTION-CONSTANT
   OPERAND1-character_k
  OP1 VALUE-character_k
   OPERAND2-6B
  OP2 VALUE-6B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_l, 6C
  LOGFORMAT-CONSTANT character_l, 6C
INSTRUCTION-CONSTANT
   OPERAND1-character_l
  OP1 VALUE-character_l
   OPERAND2-6C
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_m, 6D
  LOGFORMAT-CONSTANT character_m, 6D
INSTRUCTION-CONSTANT
   OPERAND1-character_m
  OP1 VALUE-character_m
   OPERAND2-6D
  OP2 VALUE-6D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_n, 6E
  LOGFORMAT-CONSTANT character_n, 6E
INSTRUCTION-CONSTANT
   OPERAND1-character_n
  OP1 VALUE-character_n
   OPERAND2-6E
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_o, 6F
  LOGFORMAT-CONSTANT character_o, 6F
INSTRUCTION-CONSTANT
   OPERAND1-character_o
  OP1 VALUE-character_o
   OPERAND2-6F
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_p, 70
  LOGFORMAT-CONSTANT character_p, 70
INSTRUCTION-CONSTANT
   OPERAND1-character_p
  OP1 VALUE-character_p
   OPERAND2-70
  OP2 VALUE-70
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_q, 71
  LOGFORMAT-CONSTANT character_q, 71
INSTRUCTION-CONSTANT
   OPERAND1-character_q
  OP1 VALUE-character_q
   OPERAND2-71
  OP2 VALUE-71
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_r, 72
  LOGFORMAT-CONSTANT character_r, 72
INSTRUCTION-CONSTANT
   OPERAND1-character_r
  OP1 VALUE-character_r
   OPERAND2-72
  OP2 VALUE-72
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_s, 73
  LOGFORMAT-CONSTANT character_s, 73
INSTRUCTION-CONSTANT
   OPERAND1-character_s
  OP1 VALUE-character_s
   OPERAND2-73
  OP2 VALUE-73
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_t, 74
  LOGFORMAT-CONSTANT character_t, 74
INSTRUCTION-CONSTANT
   OPERAND1-character_t
  OP1 VALUE-character_t
   OPERAND2-74
  OP2 VALUE-74
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_u, 75
  LOGFORMAT-CONSTANT character_u, 75
INSTRUCTION-CONSTANT
   OPERAND1-character_u
  OP1 VALUE-character_u
   OPERAND2-75
  OP2 VALUE-75
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_v, 76
  LOGFORMAT-CONSTANT character_v, 76
INSTRUCTION-CONSTANT
   OPERAND1-character_v
  OP1 VALUE-character_v
   OPERAND2-76
  OP2 VALUE-76
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_w, 77
  LOGFORMAT-CONSTANT character_w, 77
INSTRUCTION-CONSTANT
   OPERAND1-character_w
  OP1 VALUE-character_w
   OPERAND2-77
  OP2 VALUE-77
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_x, 78
  LOGFORMAT-CONSTANT character_x, 78
INSTRUCTION-CONSTANT
   OPERAND1-character_x
  OP1 VALUE-character_x
   OPERAND2-78
  OP2 VALUE-78
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_y, 79
  LOGFORMAT-CONSTANT character_y, 79
INSTRUCTION-CONSTANT
   OPERAND1-character_y
  OP1 VALUE-character_y
   OPERAND2-79
  OP2 VALUE-79
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_z, 7A
  LOGFORMAT-CONSTANT character_z, 7A
INSTRUCTION-CONSTANT
   OPERAND1-character_z
  OP1 VALUE-character_z
   OPERAND2-7A
  OP2 VALUE-7A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_A, 41
  LOGFORMAT-CONSTANT character_A, 41
INSTRUCTION-CONSTANT
   OPERAND1-character_A
  OP1 VALUE-character_A
   OPERAND2-41
  OP2 VALUE-41
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_B, 42
  LOGFORMAT-CONSTANT character_B, 42
INSTRUCTION-CONSTANT
   OPERAND1-character_B
  OP1 VALUE-character_B
   OPERAND2-42
  OP2 VALUE-42
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_C, 43
  LOGFORMAT-CONSTANT character_C, 43
INSTRUCTION-CONSTANT
   OPERAND1-character_C
  OP1 VALUE-character_C
   OPERAND2-43
  OP2 VALUE-43
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_D, 44
  LOGFORMAT-CONSTANT character_D, 44
INSTRUCTION-CONSTANT
   OPERAND1-character_D
  OP1 VALUE-character_D
   OPERAND2-44
  OP2 VALUE-44
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_E, 45
  LOGFORMAT-CONSTANT character_E, 45
INSTRUCTION-CONSTANT
   OPERAND1-character_E
  OP1 VALUE-character_E
   OPERAND2-45
  OP2 VALUE-45
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_F, 46
  LOGFORMAT-CONSTANT character_F, 46
INSTRUCTION-CONSTANT
   OPERAND1-character_F
  OP1 VALUE-character_F
   OPERAND2-46
  OP2 VALUE-46
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_G, 47
  LOGFORMAT-CONSTANT character_G, 47
INSTRUCTION-CONSTANT
   OPERAND1-character_G
  OP1 VALUE-character_G
   OPERAND2-47
  OP2 VALUE-47
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_H, 48
  LOGFORMAT-CONSTANT character_H, 48
INSTRUCTION-CONSTANT
   OPERAND1-character_H
  OP1 VALUE-character_H
   OPERAND2-48
  OP2 VALUE-48
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_I, 49
  LOGFORMAT-CONSTANT character_I, 49
INSTRUCTION-CONSTANT
   OPERAND1-character_I
  OP1 VALUE-character_I
   OPERAND2-49
  OP2 VALUE-49
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_J, 4A
  LOGFORMAT-CONSTANT character_J, 4A
INSTRUCTION-CONSTANT
   OPERAND1-character_J
  OP1 VALUE-character_J
   OPERAND2-4A
  OP2 VALUE-4A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_K, 4B
  LOGFORMAT-CONSTANT character_K, 4B
INSTRUCTION-CONSTANT
   OPERAND1-character_K
  OP1 VALUE-character_K
   OPERAND2-4B
  OP2 VALUE-4B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_L, 4C
  LOGFORMAT-CONSTANT character_L, 4C
INSTRUCTION-CONSTANT
   OPERAND1-character_L
  OP1 VALUE-character_L
   OPERAND2-4C
  OP2 VALUE-4C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_M, 4D
  LOGFORMAT-CONSTANT character_M, 4D
INSTRUCTION-CONSTANT
   OPERAND1-character_M
  OP1 VALUE-character_M
   OPERAND2-4D
  OP2 VALUE-4D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_N, 4E
  LOGFORMAT-CONSTANT character_N, 4E
INSTRUCTION-CONSTANT
   OPERAND1-character_N
  OP1 VALUE-character_N
   OPERAND2-4E
  OP2 VALUE-4E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_O, 4F
  LOGFORMAT-CONSTANT character_O, 4F
INSTRUCTION-CONSTANT
   OPERAND1-character_O
  OP1 VALUE-character_O
   OPERAND2-4F
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_P, 50
  LOGFORMAT-CONSTANT character_P, 50
INSTRUCTION-CONSTANT
   OPERAND1-character_P
  OP1 VALUE-character_P
   OPERAND2-50
  OP2 VALUE-50
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_Q, 51
  LOGFORMAT-CONSTANT character_Q, 51
INSTRUCTION-CONSTANT
   OPERAND1-character_Q
  OP1 VALUE-character_Q
   OPERAND2-51
  OP2 VALUE-51
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_R, 52
  LOGFORMAT-CONSTANT character_R, 52
INSTRUCTION-CONSTANT
   OPERAND1-character_R
  OP1 VALUE-character_R
   OPERAND2-52
  OP2 VALUE-52
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_S, 53
  LOGFORMAT-CONSTANT character_S, 53
INSTRUCTION-CONSTANT
   OPERAND1-character_S
  OP1 VALUE-character_S
   OPERAND2-53
  OP2 VALUE-53
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_T, 54
  LOGFORMAT-CONSTANT character_T, 54
INSTRUCTION-CONSTANT
   OPERAND1-character_T
  OP1 VALUE-character_T
   OPERAND2-54
  OP2 VALUE-54
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_U, 55
  LOGFORMAT-CONSTANT character_U, 55
INSTRUCTION-CONSTANT
   OPERAND1-character_U
  OP1 VALUE-character_U
   OPERAND2-55
  OP2 VALUE-55
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_V, 56
  LOGFORMAT-CONSTANT character_V, 56
INSTRUCTION-CONSTANT
   OPERAND1-character_V
  OP1 VALUE-character_V
   OPERAND2-56
  OP2 VALUE-56
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_W, 57
  LOGFORMAT-CONSTANT character_W, 57
INSTRUCTION-CONSTANT
   OPERAND1-character_W
  OP1 VALUE-character_W
   OPERAND2-57
  OP2 VALUE-57
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_X, 58
  LOGFORMAT-CONSTANT character_X, 58
INSTRUCTION-CONSTANT
   OPERAND1-character_X
  OP1 VALUE-character_X
   OPERAND2-58
  OP2 VALUE-58
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_Y, 59
  LOGFORMAT-CONSTANT character_Y, 59
INSTRUCTION-CONSTANT
   OPERAND1-character_Y
  OP1 VALUE-character_Y
   OPERAND2-59
  OP2 VALUE-59
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_Z, 5A
  LOGFORMAT-CONSTANT character_Z, 5A
INSTRUCTION-CONSTANT
   OPERAND1-character_Z
  OP1 VALUE-character_Z
   OPERAND2-5A
  OP2 VALUE-5A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_0, 30
  LOGFORMAT-CONSTANT character_0, 30
INSTRUCTION-CONSTANT
   OPERAND1-character_0
  OP1 VALUE-character_0
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_1, 31
  LOGFORMAT-CONSTANT character_1, 31
INSTRUCTION-CONSTANT
   OPERAND1-character_1
  OP1 VALUE-character_1
   OPERAND2-31
  OP2 VALUE-31
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_2, 32
  LOGFORMAT-CONSTANT character_2, 32
INSTRUCTION-CONSTANT
   OPERAND1-character_2
  OP1 VALUE-character_2
   OPERAND2-32
  OP2 VALUE-32
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_3, 33
  LOGFORMAT-CONSTANT character_3, 33
INSTRUCTION-CONSTANT
   OPERAND1-character_3
  OP1 VALUE-character_3
   OPERAND2-33
  OP2 VALUE-33
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_4, 34
  LOGFORMAT-CONSTANT character_4, 34
INSTRUCTION-CONSTANT
   OPERAND1-character_4
  OP1 VALUE-character_4
   OPERAND2-34
  OP2 VALUE-34
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_5, 35
  LOGFORMAT-CONSTANT character_5, 35
INSTRUCTION-CONSTANT
   OPERAND1-character_5
  OP1 VALUE-character_5
   OPERAND2-35
  OP2 VALUE-35
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_6, 36
  LOGFORMAT-CONSTANT character_6, 36
INSTRUCTION-CONSTANT
   OPERAND1-character_6
  OP1 VALUE-character_6
   OPERAND2-36
  OP2 VALUE-36
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_7, 37
  LOGFORMAT-CONSTANT character_7, 37
INSTRUCTION-CONSTANT
   OPERAND1-character_7
  OP1 VALUE-character_7
   OPERAND2-37
  OP2 VALUE-37
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_8, 38
  LOGFORMAT-CONSTANT character_8, 38
INSTRUCTION-CONSTANT
   OPERAND1-character_8
  OP1 VALUE-character_8
   OPERAND2-38
  OP2 VALUE-38
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_9, 39
  LOGFORMAT-CONSTANT character_9, 39
INSTRUCTION-CONSTANT
   OPERAND1-character_9
  OP1 VALUE-character_9
   OPERAND2-39
  OP2 VALUE-39
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_colon, 3A
  LOGFORMAT-CONSTANT character_colon, 3A
INSTRUCTION-CONSTANT
   OPERAND1-character_colon
  OP1 VALUE-character_colon
   OPERAND2-3A
  OP2 VALUE-3A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_stop, 2E
  LOGFORMAT-CONSTANT character_stop, 2E
INSTRUCTION-CONSTANT
   OPERAND1-character_stop
  OP1 VALUE-character_stop
   OPERAND2-2E
  OP2 VALUE-2E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_semi_colon, 3B
  LOGFORMAT-CONSTANT character_semi_colon, 3B
INSTRUCTION-CONSTANT
   OPERAND1-character_semi_colon
  OP1 VALUE-character_semi_colon
   OPERAND2-3B
  OP2 VALUE-3B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_minus, 2D
  LOGFORMAT-CONSTANT character_minus, 2D
INSTRUCTION-CONSTANT
   OPERAND1-character_minus
  OP1 VALUE-character_minus
   OPERAND2-2D
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_divide, 2F
  LOGFORMAT-CONSTANT character_divide, 2F
INSTRUCTION-CONSTANT
   OPERAND1-character_divide
  OP1 VALUE-character_divide
   OPERAND2-2F
  OP2 VALUE-2F
    COMMENT-;'/'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_plus, 2B
  LOGFORMAT-CONSTANT character_plus, 2B
INSTRUCTION-CONSTANT
   OPERAND1-character_plus
  OP1 VALUE-character_plus
   OPERAND2-2B
  OP2 VALUE-2B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_comma, 2C
  LOGFORMAT-CONSTANT character_comma, 2C
INSTRUCTION-CONSTANT
   OPERAND1-character_comma
  OP1 VALUE-character_comma
   OPERAND2-2C
  OP2 VALUE-2C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_less_than, 3C
  LOGFORMAT-CONSTANT character_less_than, 3C
INSTRUCTION-CONSTANT
   OPERAND1-character_less_than
  OP1 VALUE-character_less_than
   OPERAND2-3C
  OP2 VALUE-3C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_greater_than, 3E
  LOGFORMAT-CONSTANT character_greater_than, 3E
INSTRUCTION-CONSTANT
   OPERAND1-character_greater_than
  OP1 VALUE-character_greater_than
   OPERAND2-3E
  OP2 VALUE-3E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_equals, 3D
  LOGFORMAT-CONSTANT character_equals, 3D
INSTRUCTION-CONSTANT
   OPERAND1-character_equals
  OP1 VALUE-character_equals
   OPERAND2-3D
  OP2 VALUE-3D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_space, 20
  LOGFORMAT-CONSTANT character_space, 20
INSTRUCTION-CONSTANT
   OPERAND1-character_space
  OP1 VALUE-character_space
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_CR, 0D
  LOGFORMAT-CONSTANT character_CR, 0D
INSTRUCTION-CONSTANT
   OPERAND1-character_CR
  OP1 VALUE-character_CR
   OPERAND2-0D
  OP2 VALUE-0D
    COMMENT-;carriage return
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_question, 3F
  LOGFORMAT-CONSTANT character_question, 3F
INSTRUCTION-CONSTANT
   OPERAND1-character_question
  OP1 VALUE-character_question
   OPERAND2-3F
  OP2 VALUE-3F
    COMMENT-;'?'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_dollar, 24
  LOGFORMAT-CONSTANT character_dollar, 24
INSTRUCTION-CONSTANT
   OPERAND1-character_dollar
  OP1 VALUE-character_dollar
   OPERAND2-24
  OP2 VALUE-24
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_exclaim, 21
  LOGFORMAT-CONSTANT character_exclaim, 21
INSTRUCTION-CONSTANT
   OPERAND1-character_exclaim
  OP1 VALUE-character_exclaim
   OPERAND2-21
  OP2 VALUE-21
    COMMENT-;'!'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_BS, 08
  LOGFORMAT-CONSTANT character_BS, 08
INSTRUCTION-CONSTANT
   OPERAND1-character_BS
  OP1 VALUE-character_BS
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;Back Space command character
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Initialise the system
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Each PWM channels will be set to a different initial value just for the purposes
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; of demonstration. In practice, the initial duty values will depend on the requirements
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; of a given system but completely off (zero) is normally the safe option.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Note that it is difficult to distinguish difference between the intensity of LEDs driven
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; with duty factors more than 40% (40% = 102/256 or 66Hex). So using relatively small values
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; will better demonstrate the PWM control of intensity.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Initial values for LEDs give graduated intensity. Large change required for brighter LEDs.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-cold_start
  FORMATTED-LOAD s0, 05
  LOGFORMAT-LOAD s0, 05
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-;5/256 = 2%
    ADDRESS-001
      LABEL-
  FORMATTED-STORE s0, PWM_channel0
  LOGFORMAT-STORE s0, PWM_channel0[01]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel0
  OP2 VALUE-01
    COMMENT-
    ADDRESS-002
      LABEL-
  FORMATTED-LOAD s0, 0D
  LOGFORMAT-LOAD s0, 0D
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-0D
  OP2 VALUE-0D
    COMMENT-;13/256 = 5%
    ADDRESS-003
      LABEL-
  FORMATTED-STORE s0, PWM_channel1
  LOGFORMAT-STORE s0, PWM_channel1[02]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel1
  OP2 VALUE-02
    COMMENT-
    ADDRESS-004
      LABEL-
  FORMATTED-LOAD s0, 14
  LOGFORMAT-LOAD s0, 14
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-;26/256 = 8%
    ADDRESS-005
      LABEL-
  FORMATTED-STORE s0, PWM_channel2
  LOGFORMAT-STORE s0, PWM_channel2[03]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel2
  OP2 VALUE-03
    COMMENT-
    ADDRESS-006
      LABEL-
  FORMATTED-LOAD s0, 26
  LOGFORMAT-LOAD s0, 26
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-26
  OP2 VALUE-26
    COMMENT-;38/256 = 15%
    ADDRESS-007
      LABEL-
  FORMATTED-STORE s0, PWM_channel3
  LOGFORMAT-STORE s0, PWM_channel3[04]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel3
  OP2 VALUE-04
    COMMENT-
    ADDRESS-008
      LABEL-
  FORMATTED-LOAD s0, 40
  LOGFORMAT-LOAD s0, 40
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-;64/256 = 25%
    ADDRESS-009
      LABEL-
  FORMATTED-STORE s0, PWM_channel4
  LOGFORMAT-STORE s0, PWM_channel4[05]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel4
  OP2 VALUE-05
    COMMENT-
    ADDRESS-00A
      LABEL-
  FORMATTED-LOAD s0, 58
  LOGFORMAT-LOAD s0, 58
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-58
  OP2 VALUE-58
    COMMENT-;88/256 = 34%
    ADDRESS-00B
      LABEL-
  FORMATTED-STORE s0, PWM_channel5
  LOGFORMAT-STORE s0, PWM_channel5[06]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel5
  OP2 VALUE-06
    COMMENT-
    ADDRESS-00C
      LABEL-
  FORMATTED-LOAD s0, 80
  LOGFORMAT-LOAD s0, 80
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;128/256 = 50%
    ADDRESS-00D
      LABEL-
  FORMATTED-STORE s0, PWM_channel6
  LOGFORMAT-STORE s0, PWM_channel6[07]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel6
  OP2 VALUE-07
    COMMENT-
    ADDRESS-00E
      LABEL-
  FORMATTED-LOAD s0, FF
  LOGFORMAT-LOAD s0, FF
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-;255/256 = 99.6% Maximum possible
    ADDRESS-00F
      LABEL-
  FORMATTED-STORE s0, PWM_channel7
  LOGFORMAT-STORE s0, PWM_channel7[08]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel7
  OP2 VALUE-08
    COMMENT-
    ADDRESS-010
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-010
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Initial values for simple outputs match documentation example
    ADDRESS-010
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-010
      LABEL-
  FORMATTED-LOAD s0, 11
  LOGFORMAT-LOAD s0, 11
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-;17/256 = 7%
    ADDRESS-011
      LABEL-
  FORMATTED-STORE s0, PWM_channel8
  LOGFORMAT-STORE s0, PWM_channel8[09]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel8
  OP2 VALUE-09
    COMMENT-
    ADDRESS-012
      LABEL-
  FORMATTED-LOAD s0, BC
  LOGFORMAT-LOAD s0, BC
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-BC
  OP2 VALUE-BC
    COMMENT-;188/256 = 73%
    ADDRESS-013
      LABEL-
  FORMATTED-STORE s0, PWM_channel9
  LOGFORMAT-STORE s0, PWM_channel9[0A]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel9
  OP2 VALUE-0A
    COMMENT-
    ADDRESS-014
      LABEL-
  FORMATTED-LOAD s0, EF
  LOGFORMAT-LOAD s0, EF
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-EF
  OP2 VALUE-EF
    COMMENT-;239/256 = 93%
    ADDRESS-015
      LABEL-
  FORMATTED-STORE s0, PWM_channel10
  LOGFORMAT-STORE s0, PWM_channel10[0B]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel10
  OP2 VALUE-0B
    COMMENT-
    ADDRESS-016
      LABEL-
  FORMATTED-LOAD s0, 22
  LOGFORMAT-LOAD s0, 22
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-22
  OP2 VALUE-22
    COMMENT-;34/256 = 13%
    ADDRESS-017
      LABEL-
  FORMATTED-STORE s0, PWM_channel11
  LOGFORMAT-STORE s0, PWM_channel11[0C]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel11
  OP2 VALUE-0C
    COMMENT-
    ADDRESS-018
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-018
      LABEL-
  FORMATTED-ENABLE INTERRUPT
  LOGFORMAT-ENABLE INTERRUPT
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-;interrupts used to drive servo
    ADDRESS-019
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-019
      LABEL-
  FORMATTED-CALL send_welcome
  LOGFORMAT-CALL send_welcome[0FA]
INSTRUCTION-CALL
   OPERAND1-send_welcome
  OP1 VALUE-0FA
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Write welcome message to UART
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Main program
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Provides a prompt to which an input with one of the following formats is expected...
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     LDn hh
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     IOk hh
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     IOkk hh
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  Where
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     'LD' is a command to set one of the LED channels.
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     'IO' is a command to set one of the simple I/O outputs on J4.
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     'n' is an LED number in the range 0 to 7.
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     'k' or 'kk' is a simple I/O number in the range 9 to 12.
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     'hh' is a 2 digit hex value to specify the PWM duty factor (range 00 to FF).
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The input allows a degree of editing to be performed and upper and lower case letters
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; to be used.
    ADDRESS-01A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01A
      LABEL-warm_start
  FORMATTED-CALL send_prompt
  LOGFORMAT-CALL send_prompt[131]
INSTRUCTION-CALL
   OPERAND1-send_prompt
  OP1 VALUE-131
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Prompt 'KCPSM3>'
    ADDRESS-01B
      LABEL-
  FORMATTED-CALL receive_string
  LOGFORMAT-CALL receive_string[091]
INSTRUCTION-CALL
   OPERAND1-receive_string
  OP1 VALUE-091
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain input string of up to 16 characters
    ADDRESS-01C
      LABEL-
  FORMATTED-CALL upper_case_string
  LOGFORMAT-CALL upper_case_string[0CC]
INSTRUCTION-CALL
   OPERAND1-upper_case_string
  OP1 VALUE-0CC
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert string to upper case
    ADDRESS-01D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-01D
      LABEL-
  FORMATTED-LOAD sE, string_start
  LOGFORMAT-LOAD sE, string_start[30]
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-string_start
  OP2 VALUE-30
    COMMENT-;sE is memory pointer
    ADDRESS-01E
      LABEL-
  FORMATTED-FETCH s0, (sE)
  LOGFORMAT-FETCH s0, (sE)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sE)
  OP2 VALUE-(sE)
    COMMENT-;test for carriage return
    ADDRESS-01F
      LABEL-
  FORMATTED-COMPARE s0, character_CR
  LOGFORMAT-COMPARE s0, character_CR[0D]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-020
      LABEL-
  FORMATTED-JUMP Z, warm_start
  LOGFORMAT-JUMP Z, warm_start[01A]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-warm_start
  OP2 VALUE-01A
    COMMENT-
    ADDRESS-021
      LABEL-
  FORMATTED-COMPARE s0, character_R
  LOGFORMAT-COMPARE s0, character_R[52]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_R
  OP2 VALUE-52
    COMMENT-;test for 'R' of 'REG' command
    ADDRESS-022
      LABEL-
  FORMATTED-JUMP Z, R_command
  LOGFORMAT-JUMP Z, R_command[02C]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-R_command
  OP2 VALUE-02C
    COMMENT-
    ADDRESS-023
      LABEL-
  FORMATTED-COMPARE s0, character_M
  LOGFORMAT-COMPARE s0, character_M[4D]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_M
  OP2 VALUE-4D
    COMMENT-;test for 'M' of 'MEM' command
    ADDRESS-024
      LABEL-
  FORMATTED-JUMP Z, M_command
  LOGFORMAT-JUMP Z, M_command[04A]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-M_command
  OP2 VALUE-04A
    COMMENT-
    ADDRESS-025
      LABEL-
  FORMATTED-COMPARE s0, character_H
  LOGFORMAT-COMPARE s0, character_H[48]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_H
  OP2 VALUE-48
    COMMENT-;test for 'H' of 'HALT' command
    ADDRESS-026
      LABEL-
  FORMATTED-JUMP Z, H_command
  LOGFORMAT-JUMP Z, H_command[06E]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-H_command
  OP2 VALUE-06E
    COMMENT-
    ADDRESS-027
      LABEL-
  FORMATTED-COMPARE s0, character_G
  LOGFORMAT-COMPARE s0, character_G[47]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_G
  OP2 VALUE-47
    COMMENT-;test for 'G' of 'GO' command
    ADDRESS-028
      LABEL-
  FORMATTED-JUMP Z, G_command
  LOGFORMAT-JUMP Z, G_command[07B]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-G_command
  OP2 VALUE-07B
    COMMENT-
    ADDRESS-029
      LABEL-bad_command
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-;no valid command entered
    ADDRESS-02A
      LABEL-
  FORMATTED-CALL send_Error
  LOGFORMAT-CALL send_Error[154]
INSTRUCTION-CALL
   OPERAND1-send_Error
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02B
      LABEL-
  FORMATTED-JUMP warm_start
  LOGFORMAT-JUMP warm_start[01A]
INSTRUCTION-JUMP
   OPERAND1-warm_start
  OP1 VALUE-01A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Processing potential 'REG' command
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-02C
      LABEL-R_command
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02D
      LABEL-
  FORMATTED-COMPARE s0, character_E
  LOGFORMAT-COMPARE s0, character_E[45]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_E
  OP2 VALUE-45
    COMMENT-;test for 'E' of 'REG' command
    ADDRESS-02E
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-02F
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-030
      LABEL-
  FORMATTED-COMPARE s0, character_G
  LOGFORMAT-COMPARE s0, character_G[47]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_G
  OP2 VALUE-47
    COMMENT-;test for 'G' of 'REG' command
    ADDRESS-031
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-032
      LABEL-read_value
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-;test for a space
    ADDRESS-033
      LABEL-
  FORMATTED-COMPARE s0, character_space
  LOGFORMAT-COMPARE s0, character_space[20]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-034
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-035
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read two character hex value
    ADDRESS-036
      LABEL-
  FORMATTED-LOAD s3, s0
  LOGFORMAT-LOAD s3, s0
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-037
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-038
      LABEL-
  FORMATTED-LOAD s2, s0
  LOGFORMAT-LOAD s2, s0
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-039
      LABEL-
  FORMATTED-CALL ASCII_byte_to_hex
  LOGFORMAT-CALL ASCII_byte_to_hex[0D8]
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
  OP1 VALUE-0D8
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to value in s0
    ADDRESS-03A
      LABEL-
  FORMATTED-JUMP C, bad_command
  LOGFORMAT-JUMP C, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-03B
      LABEL-
  FORMATTED-LOAD sC, s0
  LOGFORMAT-LOAD sC, s0
INSTRUCTION-LOAD
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;remember value
    ADDRESS-03C
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-;test for carriage return to end command
    ADDRESS-03D
      LABEL-
  FORMATTED-COMPARE s0, character_CR
  LOGFORMAT-COMPARE s0, character_CR[0D]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-03E
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-03F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-03F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; read 32 bit register (sC) from uProc registers
    ADDRESS-03F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-03F
      LABEL-
  FORMATTED-OUTPUT sC, PORT_CPU_REGADDR
  LOGFORMAT-OUTPUT sC, PORT_CPU_REGADDR[00]
INSTRUCTION-OUTPUT
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-PORT_CPU_REGADDR
  OP2 VALUE-00
    COMMENT-; select register address
    ADDRESS-040
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_REGDATA3
  LOGFORMAT-INPUT s2, PORT_CPU_REGDATA3[04]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_REGDATA3
  OP2 VALUE-04
    COMMENT-
    ADDRESS-041
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-042
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_REGDATA2
  LOGFORMAT-INPUT s2, PORT_CPU_REGDATA2[03]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_REGDATA2
  OP2 VALUE-03
    COMMENT-
    ADDRESS-043
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-044
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_REGDATA1
  LOGFORMAT-INPUT s2, PORT_CPU_REGDATA1[02]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_REGDATA1
  OP2 VALUE-02
    COMMENT-
    ADDRESS-045
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-046
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_REGDATA0
  LOGFORMAT-INPUT s2, PORT_CPU_REGDATA0[01]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_REGDATA0
  OP2 VALUE-01
    COMMENT-
    ADDRESS-047
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-048
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-049
      LABEL-
  FORMATTED-JUMP warm_start
  LOGFORMAT-JUMP warm_start[01A]
INSTRUCTION-JUMP
   OPERAND1-warm_start
  OP1 VALUE-01A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-04A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Processing potential 'MEM' command             |
    ADDRESS-04A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-04A
      LABEL-M_command
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04B
      LABEL-
  FORMATTED-COMPARE s0, character_E
  LOGFORMAT-COMPARE s0, character_E[45]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_E
  OP2 VALUE-45
    COMMENT-;test for 'E' of 'MEM' command
    ADDRESS-04C
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-04D
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04E
      LABEL-
  FORMATTED-COMPARE s0, character_M
  LOGFORMAT-COMPARE s0, character_M[4D]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_M
  OP2 VALUE-4D
    COMMENT-;test for 'M' of 'MEM' command
    ADDRESS-04F
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-050
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-;test for a space
    ADDRESS-051
      LABEL-
  FORMATTED-COMPARE s0, character_space
  LOGFORMAT-COMPARE s0, character_space[20]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-052
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-053
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read two character hex value
    ADDRESS-054
      LABEL-
  FORMATTED-LOAD s3, s0
  LOGFORMAT-LOAD s3, s0
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-055
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-
  FORMATTED-LOAD s2, s0
  LOGFORMAT-LOAD s2, s0
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-057
      LABEL-
  FORMATTED-CALL ASCII_byte_to_hex
  LOGFORMAT-CALL ASCII_byte_to_hex[0D8]
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
  OP1 VALUE-0D8
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to value in s0
    ADDRESS-058
      LABEL-
  FORMATTED-JUMP C, bad_command
  LOGFORMAT-JUMP C, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-059
      LABEL-
  FORMATTED-LOAD sC, s0
  LOGFORMAT-LOAD sC, s0
INSTRUCTION-LOAD
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;remember value
    ADDRESS-05A
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-;test for carriage return to end command
    ADDRESS-05B
      LABEL-
  FORMATTED-COMPARE s0, character_CR
  LOGFORMAT-COMPARE s0, character_CR[0D]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-05C
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-05D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-05D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; read 32 bit value (sC) from uProc memory address
    ADDRESS-05D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-05D
      LABEL-
  FORMATTED-OUTPUT sC, PORT_CPU_MEMADDR
  LOGFORMAT-OUTPUT sC, PORT_CPU_MEMADDR[10]
INSTRUCTION-OUTPUT
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-PORT_CPU_MEMADDR
  OP2 VALUE-10
    COMMENT-; select register address
    ADDRESS-05E
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_MEMDATA0
  LOGFORMAT-INPUT s2, PORT_CPU_MEMDATA0[11]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_MEMDATA0
  OP2 VALUE-11
    COMMENT-
    ADDRESS-05F
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-060
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_MEMDATA1
  LOGFORMAT-INPUT s2, PORT_CPU_MEMDATA1[12]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_MEMDATA1
  OP2 VALUE-12
    COMMENT-
    ADDRESS-061
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-062
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_MEMDATA2
  LOGFORMAT-INPUT s2, PORT_CPU_MEMDATA2[13]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_MEMDATA2
  OP2 VALUE-13
    COMMENT-
    ADDRESS-063
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-064
      LABEL-
  FORMATTED-INPUT s2, PORT_CPU_MEMDATA3
  LOGFORMAT-INPUT s2, PORT_CPU_MEMDATA3[14]
INSTRUCTION-INPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_MEMDATA3
  OP2 VALUE-14
    COMMENT-
    ADDRESS-065
      LABEL-
  FORMATTED-CALL print_ASCII
  LOGFORMAT-CALL print_ASCII[068]
INSTRUCTION-CALL
   OPERAND1-print_ASCII
  OP1 VALUE-068
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-066
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-067
      LABEL-
  FORMATTED-JUMP warm_start
  LOGFORMAT-JUMP warm_start[01A]
INSTRUCTION-JUMP
   OPERAND1-warm_start
  OP1 VALUE-01A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-068
      LABEL-print_ASCII
  FORMATTED-CALL hex_byte_to_ASCII
  LOGFORMAT-CALL hex_byte_to_ASCII[0B3]
INSTRUCTION-CALL
   OPERAND1-hex_byte_to_ASCII
  OP1 VALUE-0B3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-069
      LABEL-
  FORMATTED-LOAD UART_data, s4
  LOGFORMAT-LOAD UART_data[sF], s4
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-s4
  OP2 VALUE-s4
    COMMENT-
    ADDRESS-06A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06B
      LABEL-
  FORMATTED-LOAD UART_data, s3
  LOGFORMAT-LOAD UART_data[sF], s3
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-s3
  OP2 VALUE-s3
    COMMENT-
    ADDRESS-06C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06D
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-06E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Processing potential 'HALT' command             |
    ADDRESS-06E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-06E
      LABEL-H_command
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06F
      LABEL-
  FORMATTED-COMPARE s0, character_A
  LOGFORMAT-COMPARE s0, character_A[41]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_A
  OP2 VALUE-41
    COMMENT-;test for 'A' of 'HALT' command
    ADDRESS-070
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-071
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-072
      LABEL-
  FORMATTED-COMPARE s0, character_L
  LOGFORMAT-COMPARE s0, character_L[4C]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_L
  OP2 VALUE-4C
    COMMENT-;test for 'L' of 'HALT' command
    ADDRESS-073
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-074
      LABEL-
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-075
      LABEL-
  FORMATTED-COMPARE s0, character_T
  LOGFORMAT-COMPARE s0, character_T[54]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_T
  OP2 VALUE-54
    COMMENT-;test for 'T' of 'HALT' command
    ADDRESS-076
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-077
      LABEL-
  FORMATTED-LOAD s2, FLAG_CPU_HALT
  LOGFORMAT-LOAD s2, FLAG_CPU_HALT[00]
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-FLAG_CPU_HALT
  OP2 VALUE-00
    COMMENT-
    ADDRESS-078
      LABEL-
  FORMATTED-OUTPUT s2, PORT_CPU_CMD
  LOGFORMAT-OUTPUT s2, PORT_CPU_CMD[30]
INSTRUCTION-OUTPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_CMD
  OP2 VALUE-30
    COMMENT-
    ADDRESS-079
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[15E]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-15E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-07A
      LABEL-
  FORMATTED-JUMP warm_start
  LOGFORMAT-JUMP warm_start[01A]
INSTRUCTION-JUMP
   OPERAND1-warm_start
  OP1 VALUE-01A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Processing potential 'GO' command
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;---------------------------------------------------------+
    ADDRESS-07B
      LABEL-G_command
  FORMATTED-CALL read_next_char
  LOGFORMAT-CALL read_next_char[082]
INSTRUCTION-CALL
   OPERAND1-read_next_char
  OP1 VALUE-082
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-07C
      LABEL-
  FORMATTED-COMPARE s0, character_O
  LOGFORMAT-COMPARE s0, character_O[4F]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_O
  OP2 VALUE-4F
    COMMENT-;test for 'O' of 'GO' command
    ADDRESS-07D
      LABEL-
  FORMATTED-JUMP NZ, bad_command
  LOGFORMAT-JUMP NZ, bad_command[029]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-bad_command
  OP2 VALUE-029
    COMMENT-
    ADDRESS-07E
      LABEL-
  FORMATTED-LOAD s2, FLAG_CPU_GO
  LOGFORMAT-LOAD s2, FLAG_CPU_GO[01]
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-FLAG_CPU_GO
  OP2 VALUE-01
    COMMENT-
    ADDRESS-07F
      LABEL-
  FORMATTED-OUTPUT s2, PORT_CPU_CMD
  LOGFORMAT-OUTPUT s2, PORT_CPU_CMD[30]
INSTRUCTION-OUTPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_CPU_CMD
  OP2 VALUE-30
    COMMENT-
    ADDRESS-080
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[15E]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-15E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-081
      LABEL-
  FORMATTED-JUMP warm_start
  LOGFORMAT-JUMP warm_start[01A]
INSTRUCTION-JUMP
   OPERAND1-warm_start
  OP1 VALUE-01A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-082
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-082
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Read next character from scratch pad memory
    ADDRESS-082
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-082
      LABEL-read_next_char
  FORMATTED-ADD sE, 01
  LOGFORMAT-ADD sE, 01
INSTRUCTION-ADD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-083
      LABEL-
  FORMATTED-FETCH s0, (sE)
  LOGFORMAT-FETCH s0, (sE)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sE)
  OP2 VALUE-(sE)
    COMMENT-;test for space
    ADDRESS-084
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; UART communication routines
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Read one character from the UART
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Character read will be returned in a register called 'UART_data'.
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The routine first tests the receiver FIFO buffer to see if data is present.
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If the FIFO is empty, the routine waits until there is a character to read.
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; As this could take any amount of time the wait loop could include a call to a
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; subroutine which performs a useful function.
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0 and UART_data
    ADDRESS-085
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-085
      LABEL-read_from_UART
  FORMATTED-INPUT s0, PORT_STATUS
  LOGFORMAT-INPUT s0, PORT_STATUS[20]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PORT_STATUS
  OP2 VALUE-20
    COMMENT-;test Rx_FIFO buffer
    ADDRESS-086
      LABEL-
  FORMATTED-TEST s0, rx_data_present
  LOGFORMAT-TEST s0, rx_data_present[04]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-rx_data_present
  OP2 VALUE-04
    COMMENT-;wait if empty
    ADDRESS-087
      LABEL-
  FORMATTED-JUMP NZ, read_character
  LOGFORMAT-JUMP NZ, read_character[089]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-read_character
  OP2 VALUE-089
    COMMENT-
    ADDRESS-088
      LABEL-
  FORMATTED-JUMP read_from_UART
  LOGFORMAT-JUMP read_from_UART[085]
INSTRUCTION-JUMP
   OPERAND1-read_from_UART
  OP1 VALUE-085
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-089
      LABEL-read_character
  FORMATTED-INPUT UART_data, PORT_UART_RX
  LOGFORMAT-INPUT UART_data[sF], PORT_UART_RX[22]
INSTRUCTION-INPUT
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-PORT_UART_RX
  OP2 VALUE-22
    COMMENT-;read from FIFO
    ADDRESS-08A
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Transmit one character to the UART
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Character supplied in register called 'UART_data'.
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The routine first tests the transmit FIFO buffer to see if it is full.
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If the FIFO is full, then the routine waits until it there is space.
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0
    ADDRESS-08B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08B
      LABEL-send_to_UART
  FORMATTED-INPUT s0, PORT_STATUS
  LOGFORMAT-INPUT s0, PORT_STATUS[20]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PORT_STATUS
  OP2 VALUE-20
    COMMENT-;test Tx_FIFO buffer
    ADDRESS-08C
      LABEL-
  FORMATTED-TEST s0, tx_full
  LOGFORMAT-TEST s0, tx_full[02]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-tx_full
  OP2 VALUE-02
    COMMENT-;wait if full
    ADDRESS-08D
      LABEL-
  FORMATTED-JUMP Z, UART_write
  LOGFORMAT-JUMP Z, UART_write[08F]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-UART_write
  OP2 VALUE-08F
    COMMENT-
    ADDRESS-08E
      LABEL-
  FORMATTED-JUMP send_to_UART
  LOGFORMAT-JUMP send_to_UART[08B]
INSTRUCTION-JUMP
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-08F
      LABEL-UART_write
  FORMATTED-OUTPUT UART_data, PORT_UART_TX
  LOGFORMAT-OUTPUT UART_data[sF], PORT_UART_TX[21]
INSTRUCTION-OUTPUT
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-PORT_UART_TX
  OP2 VALUE-21
    COMMENT-
    ADDRESS-090
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Receive ASCII string from UART
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;An ASCII string will be read from the UART and stored in scratch pad memory
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;commencing at the location specified by a constant named 'string_start'.
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The string will have a maximum length of 16 characters including a
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;carriage return (0D) denoting the end of the string.
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;As each character is read, it is echoed to the UART transmitter.
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Some minor editing is supported using backspace (BS=08) which is used
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;to adjust what is stored in scratch pad memory and adjust the display
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;on the terminal screen using characters sent to the UART transmitter.
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A test is made for the receiver FIFO becoming full. A full status is treated as
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;a potential error situation and will result in a 'Overflow Error' message being
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;transmitted to the UART, the receiver FIFO being purged of all data and an
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;empty string being stored (carriage return at first location).
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1, s2 and 'UART_data'.
    ADDRESS-091
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-091
      LABEL-receive_string
  FORMATTED-LOAD s1, string_start
  LOGFORMAT-LOAD s1, string_start[30]
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-string_start
  OP2 VALUE-30
    COMMENT-;locate start of string
    ADDRESS-092
      LABEL-
  FORMATTED-LOAD s2, s1
  LOGFORMAT-LOAD s2, s1
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s1
  OP2 VALUE-s1
    COMMENT-;compute 16 character address
    ADDRESS-093
      LABEL-
  FORMATTED-ADD s2, 10
  LOGFORMAT-ADD s2, 10
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-
    ADDRESS-094
      LABEL-receive_full_test
  FORMATTED-INPUT s0, PORT_STATUS
  LOGFORMAT-INPUT s0, PORT_STATUS[20]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PORT_STATUS
  OP2 VALUE-20
    COMMENT-;test Rx_FIFO buffer for full
    ADDRESS-095
      LABEL-
  FORMATTED-TEST s0, rx_full
  LOGFORMAT-TEST s0, rx_full[10]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-rx_full
  OP2 VALUE-10
    COMMENT-
    ADDRESS-096
      LABEL-
  FORMATTED-JUMP NZ, read_error
  LOGFORMAT-JUMP NZ, read_error[0AA]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-read_error
  OP2 VALUE-0AA
    COMMENT-
    ADDRESS-097
      LABEL-
  FORMATTED-CALL read_from_UART
  LOGFORMAT-CALL read_from_UART[085]
INSTRUCTION-CALL
   OPERAND1-read_from_UART
  OP1 VALUE-085
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain and echo character
    ADDRESS-098
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-099
      LABEL-
  FORMATTED-STORE UART_data, (s1)
  LOGFORMAT-STORE UART_data[sF], (s1)
INSTRUCTION-STORE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-(s1)
  OP2 VALUE-(s1)
    COMMENT-;write to memory
    ADDRESS-09A
      LABEL-
  FORMATTED-COMPARE UART_data, character_CR
  LOGFORMAT-COMPARE UART_data[sF], character_CR[0D]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-;test for end of string
    ADDRESS-09B
      LABEL-
  FORMATTED-RETURN Z
  LOGFORMAT-RETURN Z
INSTRUCTION-RETURN
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09C
      LABEL-
  FORMATTED-COMPARE UART_data, character_BS
  LOGFORMAT-COMPARE UART_data[sF], character_BS[08]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_BS
  OP2 VALUE-08
    COMMENT-;test for back space
    ADDRESS-09D
      LABEL-
  FORMATTED-JUMP Z, BS_edit
  LOGFORMAT-JUMP Z, BS_edit[0A2]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-BS_edit
  OP2 VALUE-0A2
    COMMENT-
    ADDRESS-09E
      LABEL-
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment memory pointer
    ADDRESS-09F
      LABEL-
  FORMATTED-COMPARE s1, s2
  LOGFORMAT-COMPARE s1, s2
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-;test for pointer exceeding 16 characters
    ADDRESS-0A0
      LABEL-
  FORMATTED-JUMP NZ, receive_full_test
  LOGFORMAT-JUMP NZ, receive_full_test[094]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-receive_full_test
  OP2 VALUE-094
    COMMENT-;next character
    ADDRESS-0A1
      LABEL-
  FORMATTED-CALL send_backspace
  LOGFORMAT-CALL send_backspace[0F7]
INSTRUCTION-CALL
   OPERAND1-send_backspace
  OP1 VALUE-0F7
   OPERAND2-
  OP2 VALUE-
    COMMENT-;hold end of string position on terminal display
    ADDRESS-0A2
      LABEL-BS_edit
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;memory pointer back one
    ADDRESS-0A3
      LABEL-
  FORMATTED-COMPARE s1, string_start
  LOGFORMAT-COMPARE s1, string_start[30]
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-string_start
  OP2 VALUE-30
    COMMENT-;test for under flow
    ADDRESS-0A4
      LABEL-
  FORMATTED-JUMP C, string_start_again
  LOGFORMAT-JUMP C, string_start_again[0A8]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-string_start_again
  OP2 VALUE-0A8
    COMMENT-
    ADDRESS-0A5
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[0F4]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-0F4
   OPERAND2-
  OP2 VALUE-
    COMMENT-;clear character at current position
    ADDRESS-0A6
      LABEL-
  FORMATTED-CALL send_backspace
  LOGFORMAT-CALL send_backspace[0F7]
INSTRUCTION-CALL
   OPERAND1-send_backspace
  OP1 VALUE-0F7
   OPERAND2-
  OP2 VALUE-
    COMMENT-;position cursor
    ADDRESS-0A7
      LABEL-
  FORMATTED-JUMP receive_full_test
  LOGFORMAT-JUMP receive_full_test[094]
INSTRUCTION-JUMP
   OPERAND1-receive_full_test
  OP1 VALUE-094
   OPERAND2-
  OP2 VALUE-
    COMMENT-;next character
    ADDRESS-0A8
      LABEL-string_start_again
  FORMATTED-CALL send_greater_than
  LOGFORMAT-CALL send_greater_than[140]
INSTRUCTION-CALL
   OPERAND1-send_greater_than
  OP1 VALUE-140
   OPERAND2-
  OP2 VALUE-
    COMMENT-;restore '>' at prompt
    ADDRESS-0A9
      LABEL-
  FORMATTED-JUMP receive_string
  LOGFORMAT-JUMP receive_string[091]
INSTRUCTION-JUMP
   OPERAND1-receive_string
  OP1 VALUE-091
   OPERAND2-
  OP2 VALUE-
    COMMENT-;begin again
    ADDRESS-0AA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Receiver buffer overflow condition
    ADDRESS-0AA
      LABEL-read_error
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Transmit error message
    ADDRESS-0AB
      LABEL-
  FORMATTED-STORE UART_data, string_start
  LOGFORMAT-STORE UART_data[sF], string_start[30]
INSTRUCTION-STORE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-string_start
  OP2 VALUE-30
    COMMENT-;empty string in memory (start with CR)
    ADDRESS-0AC
      LABEL-
  FORMATTED-CALL send_Overflow_Error
  LOGFORMAT-CALL send_Overflow_Error[143]
INSTRUCTION-CALL
   OPERAND1-send_Overflow_Error
  OP1 VALUE-143
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0AD
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0AE
      LABEL-clear_UART_Rx_loop
  FORMATTED-INPUT s0, PORT_STATUS
  LOGFORMAT-INPUT s0, PORT_STATUS[20]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PORT_STATUS
  OP2 VALUE-20
    COMMENT-;test Rx_FIFO buffer for data
    ADDRESS-0AF
      LABEL-
  FORMATTED-TEST s0, rx_data_present
  LOGFORMAT-TEST s0, rx_data_present[04]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-rx_data_present
  OP2 VALUE-04
    COMMENT-
    ADDRESS-0B0
      LABEL-
  FORMATTED-RETURN Z
  LOGFORMAT-RETURN Z
INSTRUCTION-RETURN
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-
  OP2 VALUE-
    COMMENT-;finish when buffer is empty
    ADDRESS-0B1
      LABEL-
  FORMATTED-INPUT UART_data, PORT_UART_RX
  LOGFORMAT-INPUT UART_data[sF], PORT_UART_RX[22]
INSTRUCTION-INPUT
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-PORT_UART_RX
  OP2 VALUE-22
    COMMENT-;read from FIFO and ignore
    ADDRESS-0B2
      LABEL-
  FORMATTED-JUMP clear_UART_Rx_loop
  LOGFORMAT-JUMP clear_UART_Rx_loop[0AE]
INSTRUCTION-JUMP
   OPERAND1-clear_UART_Rx_loop
  OP1 VALUE-0AE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Useful hex to ASCII conversion and handling routines
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Convert hex byte to ascii
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  input: hex byte in s2
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; output: ascii high nibble in s4
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; output: ascii low nibble in s3
    ADDRESS-0B3
      LABEL-hex_byte_to_ASCII
  FORMATTED-LOAD s3, s2
  LOGFORMAT-LOAD s3, s2
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-
    ADDRESS-0B4
      LABEL-
  FORMATTED-LOAD s4, s2
  LOGFORMAT-LOAD s4, s2
INSTRUCTION-LOAD
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-
    ADDRESS-0B5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; first: low nibble in s3
    ADDRESS-0B5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B5
      LABEL-
  FORMATTED-AND s2, 0F
  LOGFORMAT-AND s2, 0F
INSTRUCTION-AND
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-0F
  OP2 VALUE-0F
    COMMENT-
    ADDRESS-0B6
      LABEL-
  FORMATTED-CALL nibble_to_ASCII
  LOGFORMAT-CALL nibble_to_ASCII[0C0]
INSTRUCTION-CALL
   OPERAND1-nibble_to_ASCII
  OP1 VALUE-0C0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0B7
      LABEL-
  FORMATTED-LOAD s3, s2
  LOGFORMAT-LOAD s3, s2
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-
    ADDRESS-0B8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; second: high nibble in s4
    ADDRESS-0B8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B8
      LABEL-
  FORMATTED-SR0 s4
  LOGFORMAT-SR0 s4
INSTRUCTION-SR0
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0B9
      LABEL-
  FORMATTED-SR0 s4
  LOGFORMAT-SR0 s4
INSTRUCTION-SR0
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BA
      LABEL-
  FORMATTED-SR0 s4
  LOGFORMAT-SR0 s4
INSTRUCTION-SR0
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BB
      LABEL-
  FORMATTED-SR0 s4
  LOGFORMAT-SR0 s4
INSTRUCTION-SR0
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BC
      LABEL-
  FORMATTED-LOAD s2, s4
  LOGFORMAT-LOAD s2, s4
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s4
  OP2 VALUE-s4
    COMMENT-
    ADDRESS-0BD
      LABEL-
  FORMATTED-CALL nibble_to_ASCII
  LOGFORMAT-CALL nibble_to_ASCII[0C0]
INSTRUCTION-CALL
   OPERAND1-nibble_to_ASCII
  OP1 VALUE-0C0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BE
      LABEL-
  FORMATTED-LOAD s4, s2
  LOGFORMAT-LOAD s4, s2
INSTRUCTION-LOAD
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-
    ADDRESS-0BF
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C0
      LABEL-nibble_to_ASCII
  FORMATTED-COMPARE s2, 0A
  LOGFORMAT-COMPARE s2, 0A
INSTRUCTION-COMPARE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-
    ADDRESS-0C1
      LABEL-
  FORMATTED-JUMP C, nibble_ASCII_number
  LOGFORMAT-JUMP C, nibble_ASCII_number[0C4]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-nibble_ASCII_number
  OP2 VALUE-0C4
    COMMENT-
    ADDRESS-0C2
      LABEL-
  FORMATTED-ADD s2, 37
  LOGFORMAT-ADD s2, 37
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-37
  OP2 VALUE-37
    COMMENT-; convert to ascii letter a, b, c, d, e, or f
    ADDRESS-0C3
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C4
      LABEL-nibble_ASCII_number
  FORMATTED-ADD s2, 30
  LOGFORMAT-ADD s2, 30
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-; convert to ascii number 0 - 9
    ADDRESS-0C5
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Useful ASCII conversion and handling routines
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Convert character to upper case
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The character supplied in register s0.
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If the character is in the range 'a' to 'z', it is converted
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; to the equivalent upper case character in the range 'A' to 'Z'.
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; All other characters remain unchanged.
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0.
    ADDRESS-0C6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C6
      LABEL-upper_case
  FORMATTED-COMPARE s0, 61
  LOGFORMAT-COMPARE s0, 61
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-61
  OP2 VALUE-61
    COMMENT-;eliminate character codes below 'a' (61 hex)
    ADDRESS-0C7
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C8
      LABEL-
  FORMATTED-COMPARE s0, 7B
  LOGFORMAT-COMPARE s0, 7B
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-7B
  OP2 VALUE-7B
    COMMENT-;eliminate character codes above 'z' (7A hex)
    ADDRESS-0C9
      LABEL-
  FORMATTED-RETURN NC
  LOGFORMAT-RETURN NC
INSTRUCTION-RETURN
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CA
      LABEL-
  FORMATTED-AND s0, DF
  LOGFORMAT-AND s0, DF
INSTRUCTION-AND
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-DF
  OP2 VALUE-DF
    COMMENT-;mask bit5 to convert to upper case
    ADDRESS-0CB
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Convert string held in scratch pad memory to upper case.
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0, s1
    ADDRESS-0CC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0CC
      LABEL-upper_case_string
  FORMATTED-LOAD s1, string_start
  LOGFORMAT-LOAD s1, string_start[30]
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-string_start
  OP2 VALUE-30
    COMMENT-
    ADDRESS-0CD
      LABEL-ucs_loop
  FORMATTED-FETCH s0, (s1)
  LOGFORMAT-FETCH s0, (s1)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(s1)
  OP2 VALUE-(s1)
    COMMENT-
    ADDRESS-0CE
      LABEL-
  FORMATTED-COMPARE s0, character_CR
  LOGFORMAT-COMPARE s0, character_CR[0D]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-0CF
      LABEL-
  FORMATTED-RETURN Z
  LOGFORMAT-RETURN Z
INSTRUCTION-RETURN
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0D0
      LABEL-
  FORMATTED-CALL upper_case
  LOGFORMAT-CALL upper_case[0C6]
INSTRUCTION-CALL
   OPERAND1-upper_case
  OP1 VALUE-0C6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0D1
      LABEL-
  FORMATTED-STORE s0, (s1)
  LOGFORMAT-STORE s0, (s1)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(s1)
  OP2 VALUE-(s1)
    COMMENT-
    ADDRESS-0D2
      LABEL-
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-0D3
      LABEL-
  FORMATTED-JUMP ucs_loop
  LOGFORMAT-JUMP ucs_loop[0CD]
INSTRUCTION-JUMP
   OPERAND1-ucs_loop
  OP1 VALUE-0CD
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Convert character '0' to '9' to numerical value in range 0 to 9
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The character supplied in register s0. If the character is in the
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; range '0' to '9', it is converted to the equivalent decimal value.
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Characters not in the range '0' to '9' are signified by the return
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; with the CARRY flag set.
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0.
    ADDRESS-0D4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D4
      LABEL-1char_to_value
  FORMATTED-ADD s0, C6
  LOGFORMAT-ADD s0, C6
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-C6
  OP2 VALUE-C6
    COMMENT-;reject character codes above '9' (39 hex)
    ADDRESS-0D5
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;carry flag is set
    ADDRESS-0D6
      LABEL-
  FORMATTED-SUB s0, F6
  LOGFORMAT-SUB s0, F6
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-F6
  OP2 VALUE-F6
    COMMENT-;reject character codes below '0' (30 hex)
    ADDRESS-0D7
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;carry is set if value not in range
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Convert the HEX ASCII characters contained in 's3' and 's2' into
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; an equivalent hexadecimal value in register 's0'.
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The upper nibble is represented by an ASCII character in register s3.
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The lower nibble is represented by an ASCII character in register s2.
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; will be set on return.
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0, s2 and s3.
    ADDRESS-0D8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D8
      LABEL-ASCII_byte_to_hex
  FORMATTED-LOAD s0, s3
  LOGFORMAT-LOAD s0, s3
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s3
  OP2 VALUE-s3
    COMMENT-;Take upper nibble
    ADDRESS-0D9
      LABEL-
  FORMATTED-CALL ASCII_to_hex
  LOGFORMAT-CALL ASCII_to_hex[0E5]
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
  OP1 VALUE-0E5
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to value
    ADDRESS-0DA
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reject if out of range
    ADDRESS-0DB
      LABEL-
  FORMATTED-LOAD s3, s0
  LOGFORMAT-LOAD s3, s0
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;remember value
    ADDRESS-0DC
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-;multiply value by 16 to put in upper nibble
    ADDRESS-0DD
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0DE
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0DF
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0E0
      LABEL-
  FORMATTED-LOAD s0, s2
  LOGFORMAT-LOAD s0, s2
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-;Take lower nibble
    ADDRESS-0E1
      LABEL-
  FORMATTED-CALL ASCII_to_hex
  LOGFORMAT-CALL ASCII_to_hex[0E5]
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
  OP1 VALUE-0E5
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to value
    ADDRESS-0E2
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reject if out of range
    ADDRESS-0E3
      LABEL-
  FORMATTED-OR s0, s3
  LOGFORMAT-OR s0, s3
INSTRUCTION-OR
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s3
  OP2 VALUE-s3
    COMMENT-;merge in the upper nibble with CARRY reset
    ADDRESS-0E4
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Routine to convert ASCII data in 's0' to an equivalent HEX value.
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If character is not valid for hex, then CARRY is set on return.
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Register used s0
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-ASCII_to_hex
  FORMATTED-ADD s0, B9
  LOGFORMAT-ADD s0, B9
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-B9
  OP2 VALUE-B9
    COMMENT-;test for above ASCII code 46 ('F')
    ADDRESS-0E6
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0E7
      LABEL-
  FORMATTED-SUB s0, E9
  LOGFORMAT-SUB s0, E9
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-E9
  OP2 VALUE-E9
    COMMENT-;normalise 0 to 9 with A-F in 11 to 16 hex
    ADDRESS-0E8
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reject below ASCII code 30 ('0')
    ADDRESS-0E9
      LABEL-
  FORMATTED-SUB s0, 11
  LOGFORMAT-SUB s0, 11
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-;isolate A-F down to 00 to 05 hex
    ADDRESS-0EA
      LABEL-
  FORMATTED-JUMP NC, ASCII_letter
  LOGFORMAT-JUMP NC, ASCII_letter[0EF]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-ASCII_letter
  OP2 VALUE-0EF
    COMMENT-
    ADDRESS-0EB
      LABEL-
  FORMATTED-ADD s0, 07
  LOGFORMAT-ADD s0, 07
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-07
  OP2 VALUE-07
    COMMENT-;test for above ASCII code 46 ('F')
    ADDRESS-0EC
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0ED
      LABEL-
  FORMATTED-SUB s0, F6
  LOGFORMAT-SUB s0, F6
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-F6
  OP2 VALUE-F6
    COMMENT-;convert to range 00 to 09
    ADDRESS-0EE
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0EF
      LABEL-ASCII_letter
  FORMATTED-ADD s0, 0A
  LOGFORMAT-ADD s0, 0A
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-;convert to range 0A to 0F
    ADDRESS-0F0
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Text messages
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Send Carriage Return to the UART
    ADDRESS-0F1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F1
      LABEL-send_CR
  FORMATTED-LOAD UART_data, character_CR
  LOGFORMAT-LOAD UART_data[sF], character_CR[0D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-0F2
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F3
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Send a space to the UART
    ADDRESS-0F4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F4
      LABEL-send_space
  FORMATTED-LOAD UART_data, character_space
  LOGFORMAT-LOAD UART_data[sF], character_space[20]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-0F5
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F6
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send a back space to the UART
    ADDRESS-0F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F7
      LABEL-send_backspace
  FORMATTED-LOAD UART_data, character_BS
  LOGFORMAT-LOAD UART_data[sF], character_BS[08]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_BS
  OP2 VALUE-08
    COMMENT-
    ADDRESS-0F8
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F9
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0FA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0FA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Send 'PicoBlaze Servo Control' string to the UART
    ADDRESS-0FA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0FA
      LABEL-send_welcome
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FB
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FC
      LABEL-
  FORMATTED-LOAD UART_data, character_B
  LOGFORMAT-LOAD UART_data[sF], character_B[42]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_B
  OP2 VALUE-42
    COMMENT-
    ADDRESS-0FD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FE
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-0FF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-100
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-101
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-102
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-103
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-104
      LABEL-
  FORMATTED-LOAD UART_data, character_space
  LOGFORMAT-LOAD UART_data[sF], character_space[20]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-105
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-106
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-107
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-108
      LABEL-
  FORMATTED-LOAD UART_data, character_n
  LOGFORMAT-LOAD UART_data[sF], character_n[6E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_n
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-109
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-10A
      LABEL-
  FORMATTED-LOAD UART_data, character_d
  LOGFORMAT-LOAD UART_data[sF], character_d[64]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_d
  OP2 VALUE-64
    COMMENT-
    ADDRESS-10B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-10C
      LABEL-
  FORMATTED-LOAD UART_data, character_space
  LOGFORMAT-LOAD UART_data[sF], character_space[20]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-10D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-10E
      LABEL-
  FORMATTED-LOAD UART_data, character_M
  LOGFORMAT-LOAD UART_data[sF], character_M[4D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_M
  OP2 VALUE-4D
    COMMENT-
    ADDRESS-10F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-110
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-111
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-112
      LABEL-
  FORMATTED-LOAD UART_data, character_n
  LOGFORMAT-LOAD UART_data[sF], character_n[6E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_n
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-113
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-114
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-115
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-116
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-117
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-118
      LABEL-
  FORMATTED-LOAD UART_data, character_y
  LOGFORMAT-LOAD UART_data[sF], character_y[79]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_y
  OP2 VALUE-79
    COMMENT-
    ADDRESS-119
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-11A
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-11B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-11C
      LABEL-
  FORMATTED-LOAD UART_data, character_space
  LOGFORMAT-LOAD UART_data[sF], character_space[20]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-11D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-11E
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-11F
      LABEL-
  FORMATTED-LOAD UART_data, character_d
  LOGFORMAT-LOAD UART_data[sF], character_d[64]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_d
  OP2 VALUE-64
    COMMENT-
    ADDRESS-120
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-121
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-122
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-123
      LABEL-
  FORMATTED-LOAD UART_data, character_b
  LOGFORMAT-LOAD UART_data[sF], character_b[62]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_b
  OP2 VALUE-62
    COMMENT-
    ADDRESS-124
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-125
      LABEL-
  FORMATTED-LOAD UART_data, character_u
  LOGFORMAT-LOAD UART_data[sF], character_u[75]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_u
  OP2 VALUE-75
    COMMENT-
    ADDRESS-126
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-127
      LABEL-
  FORMATTED-LOAD UART_data, character_g
  LOGFORMAT-LOAD UART_data[sF], character_g[67]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_g
  OP2 VALUE-67
    COMMENT-
    ADDRESS-128
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-129
      LABEL-
  FORMATTED-LOAD UART_data, character_g
  LOGFORMAT-LOAD UART_data[sF], character_g[67]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_g
  OP2 VALUE-67
    COMMENT-
    ADDRESS-12A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-12B
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-12C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-12D
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-12E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-12F
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-130
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'KCPSM3>' prompt to the UART
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-131
      LABEL-send_prompt
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-;start new line
    ADDRESS-132
      LABEL-
  FORMATTED-LOAD UART_data, character_u
  LOGFORMAT-LOAD UART_data[sF], character_u[75]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_u
  OP2 VALUE-75
    COMMENT-
    ADDRESS-133
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-134
      LABEL-
  FORMATTED-LOAD UART_data, character_C
  LOGFORMAT-LOAD UART_data[sF], character_C[43]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_C
  OP2 VALUE-43
    COMMENT-
    ADDRESS-135
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-136
      LABEL-
  FORMATTED-LOAD UART_data, character_O
  LOGFORMAT-LOAD UART_data[sF], character_O[4F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_O
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-137
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-138
      LABEL-
  FORMATTED-LOAD UART_data, character_B
  LOGFORMAT-LOAD UART_data[sF], character_B[42]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_B
  OP2 VALUE-42
    COMMENT-
    ADDRESS-139
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13A
      LABEL-
  FORMATTED-LOAD UART_data, character_A
  LOGFORMAT-LOAD UART_data[sF], character_A[41]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_A
  OP2 VALUE-41
    COMMENT-
    ADDRESS-13B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13C
      LABEL-
  FORMATTED-LOAD UART_data, character_L
  LOGFORMAT-LOAD UART_data[sF], character_L[4C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_L
  OP2 VALUE-4C
    COMMENT-
    ADDRESS-13D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13E
      LABEL-
  FORMATTED-LOAD UART_data, character_T
  LOGFORMAT-LOAD UART_data[sF], character_T[54]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_T
  OP2 VALUE-54
    COMMENT-
    ADDRESS-13F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-140
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-140
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send '>' character to the UART
    ADDRESS-140
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-140
      LABEL-send_greater_than
  FORMATTED-LOAD UART_data, character_greater_than
  LOGFORMAT-LOAD UART_data[sF], character_greater_than[3E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_greater_than
  OP2 VALUE-3E
    COMMENT-
    ADDRESS-141
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-142
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-143
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-143
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-143
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Overflow Error' to the UART
    ADDRESS-143
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-143
      LABEL-send_Overflow_Error
  FORMATTED-LOAD UART_data, character_O
  LOGFORMAT-LOAD UART_data[sF], character_O[4F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_O
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-144
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-145
      LABEL-
  FORMATTED-LOAD UART_data, character_v
  LOGFORMAT-LOAD UART_data[sF], character_v[76]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_v
  OP2 VALUE-76
    COMMENT-
    ADDRESS-146
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-147
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-148
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-149
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-14A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14B
      LABEL-
  FORMATTED-LOAD UART_data, character_f
  LOGFORMAT-LOAD UART_data[sF], character_f[66]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_f
  OP2 VALUE-66
    COMMENT-
    ADDRESS-14C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14D
      LABEL-
  FORMATTED-LOAD UART_data, character_l
  LOGFORMAT-LOAD UART_data[sF], character_l[6C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_l
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-14E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14F
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-150
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-151
      LABEL-
  FORMATTED-LOAD UART_data, character_w
  LOGFORMAT-LOAD UART_data[sF], character_w[77]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_w
  OP2 VALUE-77
    COMMENT-
    ADDRESS-152
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-153
      LABEL-send_space_Error
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[0F4]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-0F4
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Error' to the UART
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-send_Error
  FORMATTED-LOAD UART_data, character_E
  LOGFORMAT-LOAD UART_data[sF], character_E[45]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_E
  OP2 VALUE-45
    COMMENT-
    ADDRESS-155
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-156
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-157
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-158
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-159
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-15A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-15B
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-15C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-15D
      LABEL-
  FORMATTED-JUMP send_CR
  LOGFORMAT-JUMP send_CR[0F1]
INSTRUCTION-JUMP
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-15E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'OK' to the UART
    ADDRESS-15E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15E
      LABEL-send_OK
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[0F1]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-15F
      LABEL-
  FORMATTED-LOAD UART_data, character_O
  LOGFORMAT-LOAD UART_data[sF], character_O[4F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_O
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-160
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-161
      LABEL-
  FORMATTED-LOAD UART_data, character_K
  LOGFORMAT-LOAD UART_data[sF], character_K[4B]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_K
  OP2 VALUE-4B
    COMMENT-
    ADDRESS-162
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[08B]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-08B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-163
      LABEL-
  FORMATTED-JUMP send_CR
  LOGFORMAT-JUMP send_CR[0F1]
INSTRUCTION-JUMP
   OPERAND1-send_CR
  OP1 VALUE-0F1
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Interrupt Service Routine (ISR)
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Interrupts occur at 3.92us intervals and are used to generate the PWM pulses generated
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; at a PRF of 1KHz. The 3.92us interrupt rate corresponds with a resolution of 256 steps
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; over the 1ms associated with the 1KHz PRF.
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The ISR is self contained and all registers used are preserved. Scratch pad memory
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; locations are used to determine the desired duty factor for each of 12 channels.
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Note that an interrupt is generated every 196 clock cycles. This means that there is
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; only time to execute 98 instructions between each interrupt. This ISR is 48 instructions
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; long. A further 3 instructions are also consumed by the interrupt process
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; (abandoned instruction, virtual CALL to 3FF and the interrupt vector JUMP) and hence
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; PicoBlaze has approximately half of its time available for other tasks in the main program.
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Although a loop would normal be employed in software to process each of 12 channels,
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; the implementation of a loop would increase the number of instructions which needed to
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; be executed to such an extent that this 12 channel implementation would not be possible.
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Consequently the code is written out in a linear fashion which consumes more program
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; space but which executes faster.
    ADDRESS-164
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-164
      LABEL-ISR
  FORMATTED-STORE s0, ISR_preserve_s0
  LOGFORMAT-STORE s0, ISR_preserve_s0[0D]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-0D
    COMMENT-;preserve registers to be used
    ADDRESS-165
      LABEL-
  FORMATTED-STORE s1, ISR_preserve_s1
  LOGFORMAT-STORE s1, ISR_preserve_s1[0E]
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-ISR_preserve_s1
  OP2 VALUE-0E
    COMMENT-
    ADDRESS-166
      LABEL-
  FORMATTED-STORE s2, ISR_preserve_s2
  LOGFORMAT-STORE s2, ISR_preserve_s2[0F]
INSTRUCTION-STORE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-ISR_preserve_s2
  OP2 VALUE-0F
    COMMENT-
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Determine the number of steps currently through the 1ms PWM cycle
    ADDRESS-167
      LABEL-
  FORMATTED-FETCH s1, PWM_duty_counter
  LOGFORMAT-FETCH s1, PWM_duty_counter[00]
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-PWM_duty_counter
  OP2 VALUE-00
    COMMENT-;read 8-bit counter of steps
    ADDRESS-168
      LABEL-
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment counter (will roll over to zero)
    ADDRESS-169
      LABEL-
  FORMATTED-STORE s1, PWM_duty_counter
  LOGFORMAT-STORE s1, PWM_duty_counter[00]
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-PWM_duty_counter
  OP2 VALUE-00
    COMMENT-;update count value in memory for next interrupt.
    ADDRESS-16A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Read duty factor for each channel and compare it with the duty counter and set or
    ADDRESS-16A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reset a bit in register s2 accordingly.
    ADDRESS-16A
      LABEL-
  FORMATTED-FETCH s0, PWM_channel11
  LOGFORMAT-FETCH s0, PWM_channel11[0C]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel11
  OP2 VALUE-0C
    COMMENT-;read desired setting of pulse width
    ADDRESS-16B
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-16C
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-16D
      LABEL-
  FORMATTED-FETCH s0, PWM_channel10
  LOGFORMAT-FETCH s0, PWM_channel10[0B]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel10
  OP2 VALUE-0B
    COMMENT-;read desired setting of pulse width
    ADDRESS-16E
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-16F
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-170
      LABEL-
  FORMATTED-FETCH s0, PWM_channel9
  LOGFORMAT-FETCH s0, PWM_channel9[0A]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel9
  OP2 VALUE-0A
    COMMENT-;read desired setting of pulse width
    ADDRESS-171
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-172
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-173
      LABEL-
  FORMATTED-FETCH s0, PWM_channel8
  LOGFORMAT-FETCH s0, PWM_channel8[09]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel8
  OP2 VALUE-09
    COMMENT-;read desired setting of pulse width
    ADDRESS-174
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-175
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-176
      LABEL-
  FORMATTED-OUTPUT s2, PORT_SIMPLE_IO
  LOGFORMAT-OUTPUT s2, PORT_SIMPLE_IO[7F]
INSTRUCTION-OUTPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_SIMPLE_IO
  OP2 VALUE-7F
    COMMENT-;drive pins on connector J4
    ADDRESS-177
      LABEL-
  FORMATTED-FETCH s0, PWM_channel7
  LOGFORMAT-FETCH s0, PWM_channel7[08]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel7
  OP2 VALUE-08
    COMMENT-;read desired setting of pulse width
    ADDRESS-178
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-179
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-17A
      LABEL-
  FORMATTED-FETCH s0, PWM_channel6
  LOGFORMAT-FETCH s0, PWM_channel6[07]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel6
  OP2 VALUE-07
    COMMENT-;read desired setting of pulse width
    ADDRESS-17B
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-17C
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-17D
      LABEL-
  FORMATTED-FETCH s0, PWM_channel5
  LOGFORMAT-FETCH s0, PWM_channel5[06]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel5
  OP2 VALUE-06
    COMMENT-;read desired setting of pulse width
    ADDRESS-17E
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-17F
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-180
      LABEL-
  FORMATTED-FETCH s0, PWM_channel4
  LOGFORMAT-FETCH s0, PWM_channel4[05]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel4
  OP2 VALUE-05
    COMMENT-;read desired setting of pulse width
    ADDRESS-181
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-182
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-183
      LABEL-
  FORMATTED-FETCH s0, PWM_channel3
  LOGFORMAT-FETCH s0, PWM_channel3[04]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel3
  OP2 VALUE-04
    COMMENT-;read desired setting of pulse width
    ADDRESS-184
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-185
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-186
      LABEL-
  FORMATTED-FETCH s0, PWM_channel2
  LOGFORMAT-FETCH s0, PWM_channel2[03]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel2
  OP2 VALUE-03
    COMMENT-;read desired setting of pulse width
    ADDRESS-187
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-188
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-189
      LABEL-
  FORMATTED-FETCH s0, PWM_channel1
  LOGFORMAT-FETCH s0, PWM_channel1[02]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel1
  OP2 VALUE-02
    COMMENT-;read desired setting of pulse width
    ADDRESS-18A
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-18B
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-18C
      LABEL-
  FORMATTED-FETCH s0, PWM_channel0
  LOGFORMAT-FETCH s0, PWM_channel0[01]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-PWM_channel0
  OP2 VALUE-01
    COMMENT-;read desired setting of pulse width
    ADDRESS-18D
      LABEL-
  FORMATTED-COMPARE s1, s0
  LOGFORMAT-COMPARE s1, s0
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;set carry flag if duty factor > duty counter
    ADDRESS-18E
      LABEL-
  FORMATTED-SLA s2
  LOGFORMAT-SLA s2
INSTRUCTION-SLA
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;shift carry into register s2
    ADDRESS-18F
      LABEL-
  FORMATTED-OUTPUT s2, PORT_LEDS
  LOGFORMAT-OUTPUT s2, PORT_LEDS[80]
INSTRUCTION-OUTPUT
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-PORT_LEDS
  OP2 VALUE-80
    COMMENT-;drive LEDs
    ADDRESS-190
      LABEL-
  FORMATTED-FETCH s0, ISR_preserve_s0
  LOGFORMAT-FETCH s0, ISR_preserve_s0[0D]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-0D
    COMMENT-;restore register values
    ADDRESS-191
      LABEL-
  FORMATTED-FETCH s1, ISR_preserve_s1
  LOGFORMAT-FETCH s1, ISR_preserve_s1[0E]
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-ISR_preserve_s1
  OP2 VALUE-0E
    COMMENT-
    ADDRESS-192
      LABEL-
  FORMATTED-FETCH s2, ISR_preserve_s2
  LOGFORMAT-FETCH s2, ISR_preserve_s2[0F]
INSTRUCTION-FETCH
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-ISR_preserve_s2
  OP2 VALUE-0F
    COMMENT-
    ADDRESS-193
      LABEL-
  FORMATTED-RETURNI ENABLE
  LOGFORMAT-RETURNI ENABLE
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
  OP1 VALUE-ENABLE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-194
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-194
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-194
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-194
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Interrupt Vector
    ADDRESS-194
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-194
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-ADDRESS 3FF
  LOGFORMAT-ADDRESS 3FF
INSTRUCTION-ADDRESS
   OPERAND1-3FF
  OP1 VALUE-3FF
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FF
      LABEL-
  FORMATTED-JUMP ISR
  LOGFORMAT-JUMP ISR[164]
INSTRUCTION-JUMP
   OPERAND1-ISR
  OP1 VALUE-164
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
